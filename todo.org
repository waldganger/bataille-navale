prendre les coordonnées de chaque navire dans un array à 2 dimensions.
PA = 2 colonnes. int coordPorteAvions[5][2]

* menu principal
** fusionner menus 1 et 4
** initialiser les tableaux de coordonnées des bateaux de chaque joueurs.

* placer les bateaux
** DONE tant qu'il y a un bateau
** DONE placer la proue et la poupe seulement pour aller plus vite
** DONE faire en sorte qu'en cas d'erreur de placement du bateau x, le programme boucle

placer le bateau :
while i < taille du bateau
placeBateau()
test range : 
** DONE dans le cadre ? 
** DONE en diagonale ? 
** DONE taille du bateau respectée ?
** DONE Non collé à un autre bateau ?
** DONE effacer les poupes et proues des routine de vérification de bateaux collés
** DONE Ne chevauche pas un autre bateau ?
** DONE la proue ne s'efface pas car yProue décrémente dans la boucle. A faire en partie horizontale.

** DONE affiche le bateau placé
copie des coordonnées dans array tableauJoueurs[numeroJoueur].coordPorteAvions[5][2]
tableauJoueurs[numeroJoueur].coordPorteAvions[5][2] = 
{{1, 1},
{1, 2},
{1, 3},
{1, 4},
{1, 5}}
/while

** DONE switchPlateau : la numerotation des joueurs commence à 0 (même si à l'affichage, c'est 1 et 2) // annulé : quand switchPlateau() est invoquée, numeroJoueur a déjà été incrémenté.
* tir
joueur 1 voit son plateau "masque" lié au plateau du joueur 2 (pm1 --> pj2)
tire [y][x] (reprendre placeBateau)
loop dans tous les arrays contenant les coordonnées des bateaux
si match
affiche X dans le plateau maitre de l'adversaire à la place du = 
La case correspondante du plateau masque = la case du plateau maitre.
retranche 1 point de vie au bateau concerné
sinon
affiche O dans le plateau masque du joueur
loop - paramètres : numero joueur, son plateau masque.

** TODO A faire : tir au meme endroit : si l'endroit est déjà marqué d'un X, message d'erreur.
Les points de vie du bateau sont à 0 et non à 5 !
